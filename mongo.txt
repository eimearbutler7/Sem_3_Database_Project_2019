DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1062:12
@(shell):1:1
> db.docs.aggregate([{$group : {_id: null, engineSize: {$ifNull:["$engineSize",
0]}, Average: {$avg: "$engineSize"}}}])
2019-05-02T17:51:18.355+0100 E QUERY    [js] Error: command failed: {
        "ok" : 0,
        "errmsg" : "The $ifNull accumulator is a unary operator",
        "code" : 40237,
        "codeName" : "Location40237"
} : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:18:14
_assertCommandWorked@src/mongo/shell/assert.js:536:17
assert.commandWorked@src/mongo/shell/assert.js:620:16
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1062:12
@(shell):1:1
> db.docs.aggregate([{$group: {engineSize:{$ifNull:["$engineSize", 0]}}])
... db.docs.find()
... ^C

> db.docs.aggregate(
...
... ^C

> db.docs.aggregate([{$group:{_id:null, "Average":{$avg:"$engineSize"}}])
... db.docs.aggregate([{$group : {_id: null, engineSize: {$ifNull:["$engineSize"
, 0]}, Average: {$avg: "$engineSize"}}}])
...
...
> db.docs.find()
{ "_id" : "WH", "name" : "Westmeath", "pop" : 88770 }
{ "_id" : "G", "name" : "Galway", "pop" : 258058 }
{ "_id" : "MO", "name" : "Mayo", "pop" : 130507 }
{ "_id" : "LM", "name" : "Leitrim", "pop" : 32044 }
{ "_id" : "D", "name" : "Dublin", "pop" : 1345000 }
{ "_id" : 1, "car" : { "reg" : "191-G-123", "engineSize" : 1.5 }, "addresses" :
[ "G", "WH" ] }
{ "_id" : 2, "car" : { "reg" : "11-LM-988", "engineSize" : 1.3 }, "addresses" :
[ "LM" ] }
{ "_id" : 4, "addresses" : [ "D" ] }
{ "_id" : 3, "car" : { "reg" : "142-G-28", "engineSize" : 1 }, "addresses" : [ "
MO", "G", "WH" ] }
{ "_id" : 5, "car" : { "reg" : "05-D-1234", "engineSize" : 1.4 }, "addresses" :
[ "D", "G" ] }
{ "_id" : 6, "car" : { "reg" : "152-MO-134", "engineSize" : 1.5 }, "addresses" :
 [ "MO" ] }
> db.docs.aggregate([{$project : {_id: "1", Average: {$avg: "$engineSize"}}}])
{ "_id" : "1", "Average" : null }
{ "_id" : "1", "Average" : null }
{ "_id" : "1", "Average" : null }
{ "_id" : "1", "Average" : null }
{ "_id" : "1", "Average" : null }
{ "_id" : "1", "Average" : null }
{ "_id" : "1", "Average" : null }
{ "_id" : "1", "Average" : null }
{ "_id" : "1", "Average" : null }
{ "_id" : "1", "Average" : null }
{ "_id" : "1", "Average" : null }
> db.docs.aggregate([{$project : {_id: null, Average: {$avg: "$engineSize"}}}])
{ "_id" : null, "Average" : null }
{ "_id" : null, "Average" : null }
{ "_id" : null, "Average" : null }
{ "_id" : null, "Average" : null }
{ "_id" : null, "Average" : null }
{ "_id" : null, "Average" : null }
{ "_id" : null, "Average" : null }
{ "_id" : null, "Average" : null }
{ "_id" : null, "Average" : null }
{ "_id" : null, "Average" : null }
{ "_id" : null, "Average" : null }
> db.docs.aggregate([{$group : {_id: null, Average: {$avg: "$engineSize"}}}])
{ "_id" : null, "Average" : null }
> db.docs.aggregate([{$mathc:{engineSize:{$exists:true}}}, {$group : {_id: null,
 Average: {$avg: "$engineSize"}}}])
2019-05-02T19:34:13.707+0100 E QUERY    [js] Error: command failed: {
        "ok" : 0,
        "errmsg" : "Unrecognized pipeline stage name: '$mathc'",
        "code" : 40324,
        "codeName" : "Location40324"
} : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:18:14
_assertCommandWorked@src/mongo/shell/assert.js:536:17
assert.commandWorked@src/mongo/shell/assert.js:620:16
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1062:12
@(shell):1:1
> db.docs.aggregate([{$match:{engineSize:{$exists:true}}}, {$group : {_id: null,
 Average: {$avg: "$engineSize"}}}])
> db.docs.aggregate([{$match:{engineSize:{$exists:true}}}, {$group : {_id: null,
 Average: {$avg: "$engineSize"}}}])
> db.docs.aggregate([{$mathc:{engineSize:{$exists:true}}}, {$group : {_id: null,
 Average: {$avg: "$engineSize"}}}]);
2019-05-02T19:36:09.084+0100 E QUERY    [js] Error: command failed: {
        "ok" : 0,
        "errmsg" : "Unrecognized pipeline stage name: '$mathc'",
        "code" : 40324,
        "codeName" : "Location40324"
} : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:18:14
_assertCommandWorked@src/mongo/shell/assert.js:536:17
assert.commandWorked@src/mongo/shell/assert.js:620:16
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1062:12
@(shell):1:1
> db.docs.aggregate([{$match:{engineSize:{$exists:true}}}, {$group : {_id: null,
 Average: {$avg: "$engineSize"}}}])
> db.docs.aggregate([{$mathc:{engineSize:{$exists:true}}}, {$group : {_id: null,
 Average: {$avg: "$engineSize"}}}]);
2019-05-02T19:39:38.802+0100 E QUERY    [js] Error: command failed: {
        "ok" : 0,
        "errmsg" : "Unrecognized pipeline stage name: '$mathc'",
        "code" : 40324,
        "codeName" : "Location40324"
} : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:18:14
_assertCommandWorked@src/mongo/shell/assert.js:536:17
assert.commandWorked@src/mongo/shell/assert.js:620:16
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1062:12
@(shell):1:1
> db.docs.aggregate([{$match:{engineSize:{$exists:true}}},{$group:{_id:null, "Av
erage":{$avg:"$engineSize"}}}])
> db.docs.aggregate([{$match:{engineSize:{$exists:true}}}, {$group : {_id: null,
 Average: {$avg: "$engineSize"}}}])
> db.docs.aggregate([{$match:{engineSize:{$exists: true}}}, {$group: {_id: null,
 Average: {$avg: "$engineSize"}}}])
> db.docs.aggregate([{$match:{engineSize:{$exists: true}}}, {$group: {_id: null,
 Average: {$avg: "$engineSize"}}}]);
> ^C
bye

C:\Program Files\MongoDB\Server\4.0\bin>mongod
2019-05-02T19:46:00.955+0100 I CONTROL  [main] Automatically disabling TLS 1.0,
to force-enable TLS 1.0 specify --sslDisabledProtocols 'none'
2019-05-02T19:46:00.959+0100 I CONTROL  [initandlisten] MongoDB starting : pid=2
564 port=27017 dbpath=C:\data\db\ 64-bit host=Thomas-PC
2019-05-02T19:46:00.959+0100 I CONTROL  [initandlisten] targetMinOS: Windows 7/W
indows Server 2008 R2
2019-05-02T19:46:00.959+0100 I CONTROL  [initandlisten] db version v4.0.9
2019-05-02T19:46:00.959+0100 I CONTROL  [initandlisten] git version: fc525e2d9b0
e4bceff5c2201457e564362909765
2019-05-02T19:46:00.959+0100 I CONTROL  [initandlisten] allocator: tcmalloc
2019-05-02T19:46:00.959+0100 I CONTROL  [initandlisten] modules: none
2019-05-02T19:46:00.960+0100 I CONTROL  [initandlisten] build environment:
2019-05-02T19:46:00.960+0100 I CONTROL  [initandlisten]     distmod: 2008plus-ss
l
2019-05-02T19:46:00.960+0100 I CONTROL  [initandlisten]     distarch: x86_64
2019-05-02T19:46:00.960+0100 I CONTROL  [initandlisten]     target_arch: x86_64
2019-05-02T19:46:00.960+0100 I CONTROL  [initandlisten] options: {}
2019-05-02T19:46:00.961+0100 I STORAGE  [initandlisten] exception in initAndList
en: DBPathInUse: Unable to create/open the lock file: C:\data\db\mongod.lock (Th
e process cannot access the file because it is being used by another process.).
Ensure the user executing mongod is the owner of the lock file and has the appro
priate permissions. Also make sure that another mongod instance is not already r
unning on the C:\data\db\ directory, terminating
2019-05-02T19:46:00.962+0100 I NETWORK  [initandlisten] shutdown: going to close
 listening sockets...
2019-05-02T19:46:00.962+0100 I CONTROL  [initandlisten] now exiting
2019-05-02T19:46:00.962+0100 I CONTROL  [initandlisten] shutting down with code:
100

C:\Program Files\MongoDB\Server\4.0\bin>mongo.exe
MongoDB shell version v4.0.9
connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("a74e2b4d-e35b-474f-99e1-1387d27de323")
}
MongoDB server version: 4.0.9
Server has startup warnings:
2019-05-02T14:49:27.598+0100 I CONTROL  [initandlisten]
2019-05-02T14:49:27.598+0100 I CONTROL  [initandlisten] ** WARNING: Access contr
ol is not enabled for the database.
2019-05-02T14:49:27.599+0100 I CONTROL  [initandlisten] **          Read and wri
te access to data and configuration is unrestricted.
2019-05-02T14:49:27.599+0100 I CONTROL  [initandlisten]
2019-05-02T14:49:27.599+0100 I CONTROL  [initandlisten] Hotfix KB2731284 or late
r update is not installed, will zero-out data files.
2019-05-02T14:49:27.599+0100 I CONTROL  [initandlisten]
---
Enable MongoDB's free cloud-based monitoring service, which will then receive an
d display
metrics about your deployment (disk utilization, CPU, operation statistics, etc)
.

The monitoring data will be available on a MongoDB website with a unique URL acc
essible to you
and anyone you share the URL with. MongoDB may use this information to make prod
uct
improvements and to suggest MongoDB products and deployment options to you.

To enable free monitoring, run the following command: db.enableFreeMonitoring()
To permanently disable this reminder, run the following command: db.disableFreeM
onitoring()
---

> show db
2019-05-02T19:47:37.348+0100 E QUERY    [js] Error: don't know how to show [db]
:
shellHelper.show@src/mongo/shell/utils.js:1066:11
shellHelper@src/mongo/shell/utils.js:766:15
@(shellhelp2):1:1
> show dbs
admin      0.000GB
config     0.000GB
local      0.000GB
projectbd  0.000GB
> use projectbd
switched to db projectbd
> show categories
2019-05-02T19:48:14.105+0100 E QUERY    [js] Error: don't know how to show [cate
gories] :
shellHelper.show@src/mongo/shell/utils.js:1066:11
shellHelper@src/mongo/shell/utils.js:766:15
@(shellhelp2):1:1
> show collections
docs
> db.docs.find()
{ "_id" : "WH", "name" : "Westmeath", "pop" : 88770 }
{ "_id" : "G", "name" : "Galway", "pop" : 258058 }
{ "_id" : "MO", "name" : "Mayo", "pop" : 130507 }
{ "_id" : "LM", "name" : "Leitrim", "pop" : 32044 }
{ "_id" : "D", "name" : "Dublin", "pop" : 1345000 }
{ "_id" : 1, "car" : { "reg" : "191-G-123", "engineSize" : 1.5 }, "addresses" :
[ "G", "WH" ] }
{ "_id" : 2, "car" : { "reg" : "11-LM-988", "engineSize" : 1.3 }, "addresses" :
[ "LM" ] }
{ "_id" : 4, "addresses" : [ "D" ] }
{ "_id" : 3, "car" : { "reg" : "142-G-28", "engineSize" : 1 }, "addresses" : [ "
MO", "G", "WH" ] }
{ "_id" : 5, "car" : { "reg" : "05-D-1234", "engineSize" : 1.4 }, "addresses" :
[ "D", "G" ] }
{ "_id" : 6, "car" : { "reg" : "152-MO-134", "engineSize" : 1.5 }, "addresses" :
 [ "MO" ] }
> db.docs.aggregate([{$match:{engineSize:{$exists: true}}}, {$group: {_id: null,
 Average: {$avg: "$engineSize"}}}])
> db.docs.find({$match:{engineSize:{$exists:true}}})
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $match",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.docs.find({$match:{engineSize:{$exists:true}}});
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $match",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.docs.find({"$match":{engineSize:{$exists:true}}});
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $match",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.docs.find({$match:{engineSize:{$exists:true,"$ne":null }}})
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $match",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.docs.aggregate({$match:{engineSize:{$exists:true,"$ne":null }}})
> db.docs.aggregate({$match:{engineSize:{$exists:true,"$ne":null}, {$group:{"_id
":null, "average":{$avg: "$engineSize"}}}}})
2019-05-02T20:05:26.810+0100 E QUERY    [js] SyntaxError: invalid property id @(
shell):1:65
> db.docs.aggregate([{"$match":{"engineSize":{"$exists":true}, {$group:{"_id":{n
ull}, "average":{$avg: "$engineSize"}}}}}])
2019-05-02T20:07:43.059+0100 E QUERY    [js] SyntaxError: invalid property id @(
shell):1:61
> db.docs.aggregate([{$match:{"engineSize":{$exists:true}, {$group:{"_id":null,
"average":{$avg: "$engineSize"}}}}}])
2019-05-02T20:08:49.407+0100 E QUERY    [js] SyntaxError: invalid property id @(
shell):1:57
> db.docs.aggregate([{$match:{"engineSize":{$exists:true},{$group:{"_id":null, "
average":{$avg: "$engineSize"}}}}}])
2019-05-02T20:09:22.646+0100 E QUERY    [js] SyntaxError: invalid property id @(
shell):1:56
> db.docs.aggregate([{$match:{"engineSize":{$exists:true}},{$group:{"_id":null,
"average":{$avg: "$engineSize"}}}}])
2019-05-02T20:10:12.719+0100 E QUERY    [js] SyntaxError: invalid property id @(
shell):1:57
> db.docs.aggregate([{$match:{"engineSize":{$exists:true}}},{$group:{"_id":null,
 "average":{$avg: "$engineSize"}}}])
> db.docs.aggregate([{$match:{"engineSize":{$exists:true}}},{$group:{"_id":null,
 "average":{$avg: "$engineSize"}}}]);
> db.docs.find({"engineSize":{$exists:true}}.forEach(function(obj){obj.versions[
0].content.engineSize = parseFloat(obj.versions[0].content.engineSize);db.docume
nts.save(obj);}));
2019-05-02T20:25:30.545+0100 E QUERY    [js] TypeError: (intermediate value).for
Each is not a function :
@(shell):1:14
> db.docs.find({"engineSize":{$exists:true}}.forEach(function(obj){obj.versions[
0].content.engineSize = parseFloat(obj.versions[0].content.engineSize);db.docume
nts.save(obj);}));



> db.docs.aggregate([{$match:{"engineSize":{$exists:true}}},{$group:{"_id":null,
 "average":{$avg: "$engineSize"}}}])






> db.docs.find({}, {engineSize:true})
{ "_id" : "WH" }
{ "_id" : "G" }
{ "_id" : "MO" }
{ "_id" : "LM" }
{ "_id" : "D" }
{ "_id" : 1 }
{ "_id" : 2 }
{ "_id" : 4 }
{ "_id" : 3 }
{ "_id" : 5 }
{ "_id" : 6 }
> show collections
docs
> db.docs.find()
{ "_id" : "WH", "name" : "Westmeath", "pop" : 88770 }
{ "_id" : "G", "name" : "Galway", "pop" : 258058 }
{ "_id" : "MO", "name" : "Mayo", "pop" : 130507 }
{ "_id" : "LM", "name" : "Leitrim", "pop" : 32044 }
{ "_id" : "D", "name" : "Dublin", "pop" : 1345000 }
{ "_id" : 1, "car" : { "reg" : "191-G-123", "engineSize" : 1.5 }, "addresses" :
[ "G", "WH" ] }
{ "_id" : 2, "car" : { "reg" : "11-LM-988", "engineSize" : 1.3 }, "addresses" :
[ "LM" ] }
{ "_id" : 4, "addresses" : [ "D" ] }
{ "_id" : 3, "car" : { "reg" : "142-G-28", "engineSize" : 1 }, "addresses" : [ "
MO", "G", "WH" ] }
{ "_id" : 5, "car" : { "reg" : "05-D-1234", "engineSize" : 1.4 }, "addresses" :
[ "D", "G" ] }
{ "_id" : 6, "car" : { "reg" : "152-MO-134", "engineSize" : 1.5 }, "addresses" :
 [ "MO" ] }
>


